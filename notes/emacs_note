/////////////////// 注册表项，保存为emacs.reg执行 ///////////////////
[HKEY_LOCAL_MACHINE\Software\GNU\Emacs]
"Emacs.Background"="Black"
"Emacs.Foreground"="Green"
"Emacs.ScrollBars"="ON"
"Emacs.ToolBar"="OFF"

win7添加右键菜单的步骤：
HKEY_CLASSES_ROOT\*\shell\Run with Emacs\command 下建一个项，内容是可执行文件，如runemacs.exe "%1"

Linux/Mac转码：iconv -f gbk -t utf8 inputfile > outputfile
Linux/Mac命令行模式下输入中文乱码：
LANG=zh_CN.UTF-8
export LANG

/////////////////// 注册表项，保存为emacs.reg执行 end ///////////////


Emacs笔记, 随时更新, 只记录我看到且有用的.


C-x C-c 退出
C-x C-s 保存
C-x C-w 另存
C-x u   撤销
C-w     剪切
M-w     复制
C-y     粘贴
C-x h   全选 
C-g     终止命令   ESC ESC ESC是通用的“离开”命令, 比C-g范围更大，比如递归模式
C-d	删除光标后的一个字符
M-d	移除光标后的一个词(删除和移除的不同：移除可“召回”即C-y)
<Del>	删除光标前的一个字
M-<Del>	移除光标签的一个词
C-k	移除光标到行尾的所有字符
M-k	光标删到段尾
C-@ 	Mark Set
C-s     向前搜索 incremental式的
C-r     向后搜哦
C-s C-w 以光标所在位置的字为关键字搜索 
C-l     可以让当前行置于屏幕top middle等位置，C-u 0 C-l 可以直接移动到Top
C-x C-v 打开一个文件，取代当前的缓冲区,Emacs的状态栏会出现U\%%标识 U\**编写中,保存后U\--
C-x C-q toggle只读模式或读写模式
C-x ESC RSC     执行历史命令 M-p选择上一条，M-n选择下一条
F3 C-y F4 C-u 99 F4   yank100遍的方法
解释:F3可以开始定义一个宏,c-y为宏执行的内容,F4结束宏定义.后面使用c-u批量执行99次F4的宏.关键之处就在于直接C-u 100 C-y并不能粘贴或召回100遍


C-d     删除一个字符
M-d     删除一个单词
c-k     删除一行


c-m-f   向前匹配括号(向前匹配时,光标停在前括号上)
C-M-b   向后匹配括号(往回匹配括号时,光标停在后括号,右面的一个光标上才能正常匹配)

public static void main(string args[])
{
       System.out.print("Hello,World");
}




C-v 翻页
M-v 回翻

C-f 向右移动一个字符
C-b 向左移动一个字符
C-n 移动到下一行
C-p 移动到上一行
M-{		后移一段
M-}		前移一段

M-f 向右移动一个词[对中文是移动到下一个标点]
M-b 向左移动一个词[对中文是移动到上一个标点]


C-a 移动到行首
C-e 移动到行尾
M-a 移动到句首
M-e 移动到句尾

M-> 移动到最开头(类似CTRL+HOME)
M-< 移动到最末尾

前缀参数 C-u 数字 (命令)
举例来说， C-u 8 C-f 会向前移动 8 个字符。

C-x C-b 列出缓冲区(会在一个新的buffer/tab里打开,C-x 1 返回当前buffer)
C-x 1	离开缓冲区
C-x b	切换缓冲区
C-x s	保存多个缓冲区

C-z 	终端模式里可以挂起Emacas，fg或者&emacs可以切换回去

M-x replace-string<ret>		替换命令
M-x goto-line<ret>		跳转命令
M-x recover-file<ret>		可以恢复自动保存文件
M-x fundamental-mode		可以切换到Fundamental主模式
M-x Tex-mode                    切换到Text主模式

M-x auto-fill-mode<ret>         开启/关闭 自动换行
C-u 80 C-x f                    设置自动换行为80边界
M-q                             手动折行

多窗口：
C-x 1           关掉当前光标停留窗口之外的其他窗口
C-x 2           垂直分为2个窗口
C-x 3           水平分为3个窗口
C-x o(other)    将光标移动到下方的窗口
C-x 4 C-f       在新窗口打开一个文件
C-x 0           关闭本窗口
C-x s           保存所有窗口buffer
C-x ^           纵向扩大窗口 C-x 3水平分割后有用 !root windows can not resize
C-x }           横向扩大窗口 C-x 2有用,root windows不能扩大
扩大窗口同样支持C-u模式,比如C-u C-u C-x ^ 可以以8行的高度扩高窗口
C-x +		让窗口保持同样大小

 
C-M-v           滚动下方的窗口
C-M-S-v         回滚下方的窗口               

M-!             执行SHELL命令
M-1 M-!         执行SHELL命令，并且输出插入到光标位置(将shell的结果写到当前光标位置)，不打开新buffer
M-x shell       当前buffer切换到shell  //TODO:找到回来的方法


缓冲操作:
C-x C-b         打开缓冲区
d or k          标记为删除
~               标记为未修改状态
%               标记为只读状态
s               保存缓冲
u               取消标记
x               执行标记的操作
f               在当前窗口打开该缓冲区
o               在其他窗口打开该缓冲区


目录操作:
C-x d           打开目录模式
s               toogle 日期/文件名排序显示
v               阅读光标所在的文件(在当前的缓冲区，段时间看看用!更好，比如调用
                linux/mac下的cat命令，或者windows下的type命令。
q               退出阅读的文件，上面的解释为多余且不一定正确，v配合q更好用
                再次按q还能退出目录，回到之前正在编辑的buffer
d               标记为删除
x               执行标记
D               马上删除当前文件
C               拷贝当前文件
R               重命名当前文件
+               新建文件夹
Z               压缩文件
!               对光标所在的文件执行SHELL命令
g               刷新
i               在当前缓冲区的末尾插入子目录内容
u               取消标记
t               反向标记文件
%-m             正则标记



程序编译：
M-x compile     执行编译操作
M-x gdb         GDB排错



UPDATE 2013/7/25:

goto-char	;bound a key
ESC n		也可以重复执行n次 命令
C-u n		更好用,如果不带n参数,会执行4次,还可以C-u C-u 命令,执行16次,C-u C-u C-u可以64次,最大4次可以执行256次.
C-x ]		光标前移一页
C-x [		光标后移一页
M-d 		删除一个单词
M-h (ESC-h)	快速标记当前段落
C-x h		标记整个buffer,全选(makr-whole-buffer)
C-x C-p		可以实现相同的功能
yank的时候.除了第一次C-y,后面可以继续用M-y恢复前一次的删除.
默认最多可以回退30次,通过m-x set-variable <ret> new-value <ret>可以自定义.
M-q	        重新排版当前段落,fill-paragraph
C-t		交换前后两个字符,光标放在需要交换的第二个字符上.(transpose-chars)
M-t		交换前后两个单词,光标放在需要交换的第一个单词上,或两个单词之间.(trnaspose-words)
C-x C-t		交换上下两行,光标放在第二行的任意位置上.(transpose-lines)
    		(transpose-sentences,transpose-paragraph)默认没有绑定
M-c	capitalize-word		当前字母大写	
M-u	upcase-words		当前单词全部转为大写
M-l	lowercase-word		当前单词全部转为小写
INSERT		进入改写模式,buffer栏会在主模式后出现Ovwrt字样,改写模式是一种副模式
如果键盘上没有INSERT键或不起作用,可以用M-x overwrite-mode <ret>,或利用emacs的自动
补足功能,M-x ov <ret>进入改写副模式,退出改写模式,在输入一遍即可,他是toggle的.
C-x u 移动一下光标 C-x u		是撤销的撤销
M-x revert-buffer <ret>		撤销上次存盘之后的所有修改



P101开始:

自动定义简写简写:
M-x abbrev-mode <rtn>   进入单词简写模式,Abbrev将出现在emacs状态栏
输入简写词,例如fyi后,按下C-x a i G(ADD-inverse-GLOBAL命令的意思,A i L为局部LOCAL)组合键,EMCAS将提示输入扩展短语,输入for your information,然后回车.以后输入fyi后加上一个空格或标点符号,emacs就会自动把fi扩展为for your information. Emacs很聪明,如果你输入的是大写"F YI"那么你会得到For Your Information.

删除简写模式:
M-x edit-abbrevs <rtn> 会打开一个文件,使用C-k删掉对应的简写行(不要擅自添加或修改该文件)

查看当前简写列表:
M-x list-abbrevs <rtn>

永久性定义简写方法:
把下面语句条件到.emacs
(setq-default abbrev-mode t)
(read-abbrev-file "~/.emacs.d/abbrev_defs")
(setq save-abbrevs t)
然后在用上面的方法自定义我们的简介,最后M-x write-abbrev-file <rtn>输入~/.emacs.d/abbrev_defs保存文件.

本次编辑工作中暂时禁用简写词汇的方法:
M-x kill-all-abbrevs <rtn> 或者 退出Abbrevs模式M-x abbrev-mode <rtn> 

C-x k 我不抽烟的,谢谢,删除缓冲区(kill-current-buffer)
M-x kill-some-buffers,删除所有


多行注释，矩形的操作
从第一行mark到最后一行行首，C-x r t，输入不同语言的注释符号
从第一行mark到最后一行注释符后一个位置，C-x r k，删除注释

emacs的“跨多行”，比如搜索的时候跨多行，自定义简写的时候也要跨行都可以用。输入完上一行后按c-q c-j就能输下一行了。


***********日历***********

显示日历:
M-x calendar
设置日历星期一开始:
M-x set-variable calendar-week-start-day <rtn> 1 <rtn>
如果希望每次都生效(从星期一开始):
(setq calendar-week-start-day 1)
如果希望每次启动emacs都看到日历:
(calendar)

日历里的移动:
除了C-fbnp之外,M-}和M-{以月份为单位前后移动,C-x ]和C-x [以年为单位前后移动,C-v和M-v前后卷3个月
直接跳到一个具体的日期(比如查看生日的星期):g d,然后输入年,月份名,日,然后就会移动到选定的日期.

日历里的节日:
查看当前页面显示的3个月,有哪些节日:a 但是这个显示的是西方的节日.
简单的方式查看节日:进入calcendar后,按x,Emacs即会用特殊的记号标注出是节日的日期,按u可以取消特殊显示,移动到一个具体的节日日期上,按h可以查看holidays描述.

Emacs还能告知日出,日落时间和月相.还能查看其他种类的日历,比如玛雅历,法国革命里,伊斯兰历和犹太历..


***********日记&安排***********
Emacs的日历和日记可以配合的很好.
进入Calendar模式,使用i d(insert-diary-entry)来创建一个日记.
或者g d跳转到一个未来特殊的日子,然后使用i d插入新日记.

多行的日记或行程安排:如果一篇日记超过了一行,从第二行开始后的每一行头,加入一个小空格,Emacs会识别为同一篇日记.

周记和年记:如果日记或schedule,是每个固定的星期触发,比如星期六打电话回家.那么可以进入使用i w(insert weekly)插入一个周记.今天的每个周六都包含了.同样的,以年为周期,i y(insert yearly),比如将每一年的某月某日,设定为生日.

循环记:比如3个月给汽车换一次机油和三滤,先移动到上一次更换机油的日子,然后i c(insert cyclic),然后输入多少天重复一次,比如90即可. 最终生成的diary: %%(diary-cyclic 90 9 1 2013) change the oil,这个日记的意思是从2013年的9月1号开始,每隔90天更换一次机油.

日期段记:比如9月19号到9月21号中秋节去火星玩,先移动9月19号放假开始,然后C-@或C-SPACE开始标注,然后c-f往前移动到9月21号上,接着输入i b,Emacs就会自动生成一条记录,你可以在后面接上事项说明,最终生成的看起来就是这样: %%(diary-block 9 19 2013 9 21 2013) Trip to Mars

领工资记:比如提醒你每月的15号要去查看工资到了没,咋办?简单,i m搞定.结果是这样的: * 15 发工资了,大家速度查账啊

其实本质上Diary文件和其他都一样,就是按照某种特殊的格式来记录的文本,只要记住以后,几乎可以不用打开calendar以及使用相关命令,直接编辑diary文件即可.最后, 在说一点其他的写法:

Oct 5 My Birthday 
10/5 My Birthday
上面两个是一样的,也就是每年的10月5号提醒.(注意,如果带了年,比如: Oct 5 1990 My Birthday ,你将会发现在未来收不到任何生日提醒)

每个月周三和女友去看电影,我们知道可以这样做: Wednesday Go to the cinema with GF, 周六打电话回家: Saturday Call back home, 那么如果不想在Calendar的每一个星期六上都出现几号,怎么办? 这样做: &Saturday Call.. 前面加一个&意思是不要让Emacs在日历上把该条目显示出来, 因为打电话是经常要做不会忘记的事,而你同时想保持日历的清洁(对于某些癖好者来说),开个玩笑,有时我们只是想让日历保持清楚,提醒我们最重要的事,不是吗?

(diary)放进.emacs,可以启动的时候加载日记.
这样,某天你忘记生日的时候,当你打开Emacs时候,他就会提醒你.
在Calendar里按m,则可以特殊标记出所有日记记录.按u,取消特殊标志(记住x是显示holidays,m是日记和行程安排,u是取消)


****************邮件之发邮件****************
C-x m 打开*mail*, 用于发送邮件, 也可以其他地方编辑好格式和内容,复制到mail buffer.
C-c C-c 发送
多个邮件接收地址,用逗号隔开
To: 地址和CC,BCC等如果跨多行,每行开头加一个空格,和上面的日记跨多行,这样emacs才能知道哪些邮件地址属于同一个发送列表.(TO 收件人/CC 抄送/BCC 密送)
永久密送自己的方法: .emacs里添加 (setq mail-self-blind t)
上面的这条可以用来备份邮件,但更好的做法是,添加FCC: 然后紧跟着路径和一个文件名,Emacs会自动备份该邮件到指定的文件. 永久设置FCC的方式是:(setq mail-archive-file-name "mycopies") 这样所有的邮件都会保存在主目录里名为mycopies的文件里.

Emacs不支持用文件作为邮件附件的做法,但允许把某些通用文件的文本的ASCII文本插入到邮件信息里.在mail buffer的正文出C-x i,然后根据提示输入一个文件的路径即可.

签名:主目录维护一个".signature"的文件,里面的内容就是你的签名,格式可以随意自定义,比如这样:
-----------------------------------------------------------
John Steve			Life is brief, and then-
you die, you know?
email: ifconfig@yeah.net	phone: (+86)186791xxxxx
-----------------------------------------------------------
然后使用C-c C-w组合键插入签名(测试在emacs for win下不起作用)

假名:比如有一个2的邮件地址非常非常长,就像这样hellostupidihavealonglongmailaddress@h4ck3rguys.com,那么可以使用M-x define-mail-alias <rtn> stupid <rtn> hellostupidihavealonglongmailaddress@h4ck3rguys.com. 这样, 下次发送邮件的时候就可以在地址栏输入stupid用于代替那长长的邮件地址.
这种做法的坏处是退出emacs后就消失了,当然,你可能想到了...
是的,在.emacs里加入以下语句, just like this:
(define-mail-alias "stupid" "hellostupidihavealonglongmailaddress@h4ck3rguys.com")
(define-mail-alias "stupid2" "howdystupidihavealonglongmailaddress@h4ck3rguys.com")
好吧,请忽略以上的语气...因为想起了一件让我生气的事,所以仅仅是调侃一下..快点把你朋友和同事的邮件列表加进去吧 :)
实际上,放在.emacs里的假名优先级最高,如果为了整洁,还可以放在另外的一个单独文件,emacs还会尝试读取.mailrc文件.


回信地址:有时候如果收不到别人的回信,有可能需要手工指定回信地址,使用Reply-to:就可以了,或使用mail-reply-TO.永久性的指定一个回信地址可以(setq mail-default-reply-to "www@yyy.com").注意我没测试这条命令.所以,如果他不能正常工作,尝试(setq mail-reply-to "www@yyy.com")


*********************邮件之收邮件********************
